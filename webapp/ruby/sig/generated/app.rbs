# @rbs generic unchecked out Elem
module Enumerable[unchecked out Elem]
  def first!: () -> Elem
end

class Data
  self.@classes: Hash[untyped, Hash[Symbol, String]]

  # :: [KLASS < ::Data::_DataClass] (**untyped) ?{ (KLASS) [self: KLASS] -> void } -> KLASS
  def self.typed_define: [KLASS < ::Data::_DataClass] (**untyped) ?{ (KLASS) [self: KLASS] -> void } -> KLASS

  def self.generate_rbs: (untyped class_name, untyped attrs) -> untyped
end

module Isupipe
  class App < Sinatra::Base
    POWERDNS_SUBDOMAIN_ADDRESS: untyped

    DEFAULT_SESSION_ID_KEY: ::String

    DEFAULT_SESSION_EXPIRES_KEY: ::String

    DEFAULT_USER_ID_KEY: ::String

    DEFAULT_USERNAME_KEY: ::String

    class HttpError < StandardError
      # @dynamic code
      attr_reader code: Integer

      # @rbs code: Integer
      # @rbs message: ?String
      # @rbs returns void
      def initialize: (Integer code, ?untyped message) -> void
    end

    def db_conn: () -> Mysql2::Client[Mysql2::ResultAsHash]

    def connect_db: () -> Mysql2::Client[Mysql2::ResultAsHash]

    # :: [T] () { (Mysql2::Client[Mysql2::ResultAsHash]) -> T } -> T
    def db_transaction: [T] () { (Mysql2::Client[Mysql2::ResultAsHash]) -> T } -> T

    def decode_request_body: (singleton(ReserveLivestreamRequest)) -> ReserveLivestreamRequest
                           | (singleton(PostLivecommentRequest)) -> PostLivecommentRequest
                           | (singleton(ModerateRequest)) -> ModerateRequest
                           | (singleton(PostReactionRequest)) -> PostReactionRequest
                           | (singleton(PostIconRequest)) -> PostIconRequest
                           | (singleton(PostUserRequest)) -> PostUserRequest
                           | (singleton(LoginRequest)) -> LoginRequest

    # @rbs str: String
    # @rbs returns Integer
    def cast_as_integer: (String str) -> Integer

    def verify_user_session!: () -> nil

    # @rbs tx: Mysql2::Client[Mysql2::ResultAsHash]
    # @rbs livestream_model: Hash[Symbol, Mysql2::row_value_type]
    # @rbs returns Hash[Symbol, untyped]
    def fill_livestream_response: (Mysql2::Client[Mysql2::ResultAsHash] tx, Hash[Symbol, Mysql2::row_value_type] livestream_model) -> Hash[Symbol, untyped]

    # @rbs tx: Mysql2::Client[Mysql2::ResultAsHash]
    # @rbs livecomment_model: Hash[Symbol, untyped]
    # @rbs returns Hash[Symbol, untyped]
    def fill_livecomment_response: (Mysql2::Client[Mysql2::ResultAsHash] tx, Hash[Symbol, untyped] livecomment_model) -> Hash[Symbol, untyped]

    # @rbs tx: Mysql2::Client[Mysql2::ResultAsHash]
    # @rbs report_model: Hash[Symbol, untyped]
    # @rbs returns Hash[Symbol, untyped]
    def fill_livecomment_report_response: (Mysql2::Client[Mysql2::ResultAsHash] tx, Hash[Symbol, untyped] report_model) -> Hash[Symbol, untyped]

    # @rbs tx: Mysql2::Client[Mysql2::ResultAsHash]
    # @rbs reaction_model: Hash[Symbol, Mysql2::row_value_type]
    # @rbs returns Hash[Symbol, untyped]
    def fill_reaction_response: (Mysql2::Client[Mysql2::ResultAsHash] tx, Hash[Symbol, Mysql2::row_value_type] reaction_model) -> Hash[Symbol, untyped]

    # @rbs tx: Mysql2::Client[Mysql2::ResultAsHash]
    # @rbs user_model: Hash[Symbol, Mysql2::row_value_type]
    # @rbs returns Hash[Symbol, untyped]
    def fill_user_response: (Mysql2::Client[Mysql2::ResultAsHash] tx, Hash[Symbol, Mysql2::row_value_type] user_model) -> Hash[Symbol, untyped]

    BCRYPT_DEFAULT_COST: ::Integer

    FALLBACK_IMAGE: ::String

    UserRankingEntry: untyped
  end
end
